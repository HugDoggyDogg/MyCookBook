{"version":3,"sources":["src/Types/Months.ts","src/Types/SearchableString.ts","src/Types/Ingredient.ts","src/Types/Recipe.ts","src/Types/functions.ts","src/Home/Components/HomeView.js","src/Types/Patterns.ts","src/Home/Components/RecipeRow.js","App.tsx","web-build/register-service-worker.js"],"names":["Months","January","name","value","February","March","April","May","June","July","August","September","October","November","December","wholeYear","range","begin","end","filter","m","start","toString","SearchableString","str","lower","toLowerCase","includes","p","Ingredient","seasonality","isAvailableIn","length","matchesPattern","this","coconutMilk","lentils","tomato","chickpea","leek","turnip","carrot","celeryBranch","parisMushroom","onion","garlic","soySauce","Ingredients","allRecipes","Recipe","ingredients","url","predicate","ingredientsMatch","i","matchesPatterns","list","printIngredients","map","join","HomeView","useState","filteredRecipes","setFilteredRecipes","text","patterns","split","s","trim","filtered","recipe","useFilteredRecipes","filterRecipes","styles","StyleSheet","create","column","flex","container","backgroundColor","flexDirection","justifyContent","View","style","TextInput","height","borderColor","borderWidth","marginBottom","onChangeText","FlatList","data","renderItem","row","title","fontWeight","fontSize","Text","Button","onPress","WebBrowser","bind","RecipeRow","item","keyExtractor","App","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"2YAIA,IAAMA,EAAS,CACbC,QAAS,CAACC,KAAM,UAAWC,MAAO,GAClCC,SAAU,CAACF,KAAM,aAAWC,MAAO,GACnCE,MAAO,CAACH,KAAM,OAAQC,MAAO,GAC7BG,MAAO,CAACJ,KAAM,QAASC,MAAO,GAC9BI,IAAK,CAACL,KAAM,MAAOC,MAAO,GAC1BK,KAAM,CAACN,KAAM,OAAQC,MAAO,GAC5BM,KAAM,CAACP,KAAM,UAAWC,MAAO,GAC/BO,OAAQ,CAACR,KAAM,UAAQC,MAAO,GAC9BQ,UAAW,CAACT,KAAM,YAAaC,MAAO,GACtCS,QAAS,CAACV,KAAM,UAAWC,MAAO,IAClCU,SAAU,CAACX,KAAM,WAAYC,MAAO,IACpCW,SAAU,CAACZ,KAAM,cAAYC,MAAO,KAGhCY,EAAY,CACdf,EAAOC,QACPD,EAAOI,SACPJ,EAAOK,MACPL,EAAOM,MACPN,EAAOO,IACPP,EAAOQ,KACPR,EAAOS,KACPT,EAAOU,OACPV,EAAOW,UACPX,EAAOY,QACPZ,EAAOa,SACPb,EAAOc,UAWI,M,iWAAA,IACRd,EADP,CAEIe,YACAC,MAXJ,SAAeC,EAAcC,GACzB,OAAID,GAASC,EAAYD,EACrBA,GAASC,EACFH,EAAUI,QAAO,SAAAC,GAAC,OAAIA,EAAEjB,OAASc,EAAMd,OAASiB,EAAEjB,OAASe,EAAIf,SAEnEY,EAAUI,QAAO,SAAAC,GAAC,OAAIA,GAAKF,GAAOE,GAAKC,UAO9CC,oBC5CW,SAASC,EAAiBC,GACrC,IAAMC,EAAgBD,EAAIE,cAE1B,MAAQ,CACJC,SADI,SACKC,GACL,OAAOH,EAAME,SAASC,IAE1BzB,MAAOqB,GCLf,SAASK,EAAW3B,EAAwB4B,GACxC,MAAQ,CACJ5B,KAAMA,EACN4B,YAAaA,EACbC,cAHI,SAGUH,GACV,OAA6D,GAAtDE,EAAYX,QAAO,SAAAC,GAAC,OAAIA,EAAElB,KAAKyB,SAASC,MAAII,QAEvDC,eANI,SAMWL,GACX,OAAO1B,EAAKyB,SAASC,IAAMM,KAAKH,cAAcH,KAK3C,OACXC,WAAYA,EACZM,YAAaN,EAAWN,EAAiB,gBAAiBvB,EAAOe,WACjEqB,QAASP,EAAWN,EAAiB,aAAcvB,EAAOe,WAC1DsB,OAAQR,EAAWN,EAAiB,WAAYvB,EAAOgB,MAAMhB,EAAOQ,KAAMR,EAAOW,YACjF2B,SAAUT,EAAWN,EAAiB,gBAAiBvB,EAAOe,WAC9DwB,KAAMV,EAAWN,EAAiB,YAAavB,EAAOgB,MAAMhB,EAAOW,UAAWX,EAAOM,QACrFkC,OAAQX,EAAWN,EAAiB,UAAWvB,EAAOgB,MAAMhB,EAAOY,QAASZ,EAAOO,MACnFkC,OAAQZ,EAAWN,EAAiB,YAAavB,EAAOgB,MAAMhB,EAAOW,UAAWX,EAAOK,QACvFqC,aAAcb,EAAWN,EAAiB,yBAAuBvB,EAAOgB,MAAMhB,EAAOY,QAASZ,EAAOK,QACrGsC,cAAed,EAAWN,EAAiB,wBAAyBvB,EAAOe,WAC3E6B,MAAOf,EAAWN,EAAiB,WAAYvB,EAAOgB,MAAMhB,EAAOW,UAAWX,EAAOM,QACrFuC,OAAQhB,EAAWN,EAAiB,gBAAiBvB,EAAOgB,MAAMhB,EAAOS,KAAMT,EAAOc,WACtFgC,SAAUjB,EAAWN,EAAiB,cAAevB,EAAOe,Y,ICtB5DuB,EAYAS,EAZAT,SACAH,EAWAY,EAXAZ,YACAC,EAUAW,EAVAX,QACAC,EASAU,EATAV,OACAE,EAQAQ,EARAR,KACAC,EAOAO,EAPAP,OACAC,EAMAM,EANAN,OACAC,EAKAK,EALAL,aACAC,EAIAI,EAJAJ,cACAC,EAGAG,EAHAH,MACAC,EAEAE,EAFAF,OACAC,EACAC,EADAD,SAkBEE,EAAuB,CAfPC,EACpB1B,EAAiB,yBACjB,CAACe,EAAUH,GACX,+CAEqBc,EACrB1B,EAAiB,uBACjB,CAACa,EAASC,GACV,iFAEsBY,EACpB1B,EAAiB,8BACjB,CAACc,EAAQE,EAAMC,EAAQC,EAAQC,EAAcC,EAAeC,EAAOC,EAAQC,GAC3E,sFAIG,SAASG,EAAO/C,EAAwBgD,EAA2BC,GACtE,SAASlB,EAAeL,GACpB,ICrC0BwB,EDuCpBC,GCvCoBD,EDqCA,SAACE,GAAD,OAAmBA,EAAErB,eAAeL,ICpC1B,GDsCJsB,ECtCxB/B,OAAOiC,GAAWpB,QDuC1B,OAAO9B,EAAKyB,SAASC,IAAMyB,EAG/B,MAAQ,CACJE,gBADI,SACY3B,GACZ,OCjDsBwB,EDiDLnB,GCjDNuB,EDiDG5B,GChDVT,OAAOiC,GAAWpB,SAAWwB,EAAKxB,OAD3C,IAAgBwB,EAAWJ,GDmD1BlD,KAAMA,EACNgD,YAAaA,EACbC,IAAKA,EACLM,iBAPI,WAQA,OAAOP,EAAYQ,KAAI,SAAAJ,GAAC,OAAIA,EAAEpD,KAAKC,SAAOwD,KAAK,Q,4BE7C5C,SAASC,IAAY,IAAD,EFkD5B,WAA+D,IAAD,EACnBC,mBAASb,GADU,WAC1Dc,EAD0D,KACzCC,EADyC,KASjE,MAAO,CAACD,EANoB,SAACE,GACzB,IAAMC,EAAoCD,EG7DnCE,MAAM,KAAKR,KAAI,SAAAS,GAAC,OAAIA,EAAEC,UAAQjD,QAAO,SAAAgD,GAAC,OAAIA,EAAEnC,OAAS,KH8DtDqC,EAAWrB,EAAW7B,QAAO,SAACmD,GAAD,OAAYA,EAAOf,gBAAgBU,MACtEF,EAAmBM,KEtDkBE,GAFV,WAExBT,EAFwB,KAEPU,EAFO,KAIzBC,EAASC,IAAWC,OAAO,CAC7BC,OAAQ,CACJC,KAAM,GAEVC,UAAW,CACPD,KAAM,EACNE,gBAAiB,OACjBC,cAAe,MACfC,eAAgB,YAIxB,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAOV,EAAOK,WACpB,kBAACI,EAAA,EAAD,CAAMC,MAAOV,EAAOG,SACpB,kBAACM,EAAA,EAAD,CAAMC,MAAOV,EAAOG,QAChB,kBAACQ,EAAA,EAAD,CACAD,MAAO,CAAEE,OAAQ,GAAIC,YAAa,OAAQC,YAAa,EAAGC,aAAc,IACxEC,aAAcjB,IAEd,kBAACkB,EAAA,EAAD,CACAC,KAAM7B,EACN8B,WAAY,SAACC,GAAD,OE3BjB,SAAmBvB,GAEtB,IAAMG,EAASC,IAAWC,OAC1B,CACIkB,IAAK,CACDN,YAAa,EACbD,YAAa,OACbT,KAAM,EACNG,cAAe,OAEnBc,MAAO,CACHC,WAAY,OACZC,SAAU,MAIlB,OACI,kBAACd,EAAA,EAAD,CAAMC,MAAOV,EAAOoB,KAChB,kBAACX,EAAA,EAAD,CAAMC,MAAO,CACTN,KAAM,EACNG,cAAe,WAEf,kBAACiB,EAAA,EAAD,CAAMd,MAAOV,EAAOqB,OAAQxB,EAAOpE,KAAKC,OACxC,kBAAC+E,EAAA,EAAD,KACI,kBAACe,EAAA,EAAD,wBAAoB3B,EAAOb,mBAA3B,OAIR,kBAACyC,EAAA,EAAD,CACIJ,MAAM,kBACNK,QAASC,IAA4BC,KAAKnE,KAAMoC,EAAOnB,QFHtCmD,CAAUT,EAAIU,OACnCC,aAAc,SAACD,GAAD,OAAUA,EAAKrG,KAAKC,UAGtC,kBAAC+E,EAAA,EAAD,CAAMC,MAAOV,EAAOG,UGrCb,SAAS6B,IACtB,OAAO7C,IAHT,mC,4DCCI,kBAAmB8C,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,qCAAsC,CAAEC,MAAO,iBACxDC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.f9153dd6.chunk.js","sourcesContent":["type Month = {\n    name: string,\n    value: number\n}\nconst Months = {\n  January: {name: \"janvier\", value: 1},\n  February: {name: \"février\", value: 2},\n  March: {name: \"mars\", value: 3},\n  April: {name: \"avril\", value: 4},\n  May: {name: \"mai\", value: 5},\n  June: {name: \"juin\", value: 6},\n  July: {name: \"juillet\", value: 7},\n  August: {name: \"août\", value: 8},\n  September: {name: \"septembre\", value: 9},\n  October: {name: \"octobre\", value: 10},\n  November: {name: \"novembre\", value: 11},\n  December: {name: \"décembre\", value: 12},\n};\n\nconst wholeYear = [\n    Months.January, \n    Months.February, \n    Months.March, \n    Months.April, \n    Months.May, \n    Months.June, \n    Months.July, \n    Months.August, \n    Months.September, \n    Months.October, \n    Months.November, \n    Months.December\n];\n\nfunction range(begin: Month, end: Month): List[Month] {\n    if (begin == end) return begin;\n    if (begin <= end) {\n        return wholeYear.filter(m => m.value >= begin.value && m.value <= end.value);    \n    }\n    return wholeYear.filter(m => m >= end || m <= start);\n}\n\nexport default {\n    ...Months,\n    wholeYear,\n    range,\n    toString,\n};","import {Pattern} from './Patterns';\n\nexport default function SearchableString(str: string) {\n    const lower: string = str.toLowerCase();\n\n    return ({\n        includes(p: Pattern): boolean {\n            return lower.includes(p);\n        },\n        value: str\n    });\n    \n}","import Months from './Months';\nimport {MonthPattern} from './Patterns';\nimport SearchableString from './SearchableString';\n\nfunction Ingredient(name: SearchableString, seasonality: Months[]) {\n    return ({\n        name: name,\n        seasonality: seasonality,\n        isAvailableIn(p: MonthPattern): boolean {\n            return seasonality.filter(m => m.name.includes(p)).length != 0;\n        },\n        matchesPattern(p: Pattern): boolean {\n            return name.includes(p) || this.isAvailableIn(p);\n        },\n    });\n}\n\nexport default {\n    Ingredient: Ingredient,\n    coconutMilk: Ingredient(SearchableString(\"Lait de Coco\"), Months.wholeYear),\n    lentils: Ingredient(SearchableString(\"Lentilles\"), Months.wholeYear),\n    tomato: Ingredient(SearchableString(\"Tomates\"), Months.range(Months.June, Months.September)),\n    chickpea: Ingredient(SearchableString(\"Pois-Chiches\"), Months.wholeYear),\n    leek: Ingredient(SearchableString(\"Poireaux\"), Months.range(Months.September, Months.April)),\n    turnip: Ingredient(SearchableString(\"Navets\"), Months.range(Months.October, Months.May)),\n    carrot: Ingredient(SearchableString(\"Carottes\"), Months.range(Months.September, Months.March)),\n    celeryBranch: Ingredient(SearchableString(\"Branches de céleri\"), Months.range(Months.October, Months.March)),\n    parisMushroom: Ingredient(SearchableString(\"Champignons de Paris\"), Months.wholeYear),\n    onion: Ingredient(SearchableString(\"Oignons\"), Months.range(Months.September, Months.April)),\n    garlic: Ingredient(SearchableString(\"Gousse d'ail\"), Months.range(Months.July, Months.December)),\n    soySauce: Ingredient(SearchableString(\"Sauce Soja\"), Months.wholeYear)\n};","import {useState} from \"react\";\nimport Months from './Months';\nimport {Pattern, parsePatterns} from './Patterns';\nimport Ingredients from './Ingredient';\nimport {exists, forall} from './functions'\nimport SearchableString from './SearchableString';\n\nconst {\n    chickpea, \n    coconutMilk, \n    lentils, \n    tomato, \n    leek,\n    turnip,\n    carrot,\n    celeryBranch,\n    parisMushroom,\n    onion,\n    garlic,\n    soySauce,\n} = Ingredients;\n\nconst chickpeaCurry = Recipe(\n  SearchableString(\"Curry de pois-chiches\"),\n  [chickpea, coconutMilk],\n  \"https://www.youtube.com/watch?v=aP6eXpwIths\"\n);\nconst veganBolognese = Recipe(\n  SearchableString(\"Bolognaise Végan\"),\n  [lentils, tomato],\n  \"https://www.marmiton.org/recettes/recette_bolognaise-aux-lentilles_27842.aspx\"\n);\nconst veganParmentier = Recipe(\n    SearchableString(\"Hachis parmentier végan\"),\n    [tomato, leek, turnip, carrot, celeryBranch, parisMushroom, onion, garlic, soySauce],\n    \"https://www.marmiton.org/recettes/recette_hachis-parmentier-vegetarien_14594.aspx\"\n);\nconst allRecipes: Recipe[] = [chickpeaCurry, veganBolognese, veganParmentier];\n\nexport function Recipe(name: SearchableString, ingredients: Ingredient[], url: string) {\n    function matchesPattern(p: Pattern): boolean {\n        const ingredientMatches = (i: Ingredient) => i.matchesPattern(p);\n\n        const ingredientsMatch = exists(ingredients, ingredientMatches);\n        return name.includes(p) || ingredientsMatch;\n    }\n\n    return ({\n        matchesPatterns(p: Pattern[]): boolean {\n            return forall(p, matchesPattern);\n        },\n        name: name,\n        ingredients: ingredients,\n        url: url,\n        printIngredients(): string {\n            return ingredients.map(i => i.name.value).join(', ');\n        }\n    });\n}\n\nexport function useFilteredRecipes(): [Recipe[], ((string) => void)] {\n    const [filteredRecipes, setFilteredRecipes] = useState(allRecipes);\n\n    const filterRecipes: void = (text: string) => {\n        const patterns: Pattern[] = parsePatterns(text);\n        const filtered = allRecipes.filter((recipe) => recipe.matchesPatterns(patterns));\n        setFilteredRecipes(filtered);\n    }\n\n    return [filteredRecipes, filterRecipes];\n}\n","export function forall(list: A[], predicate: (A) => boolean): boolean {\n    return list.filter(predicate).length === list.length;\n}\n\nexport function exists(list: A[], predicate: (A) => boolean): boolean {\n    return list.filter(predicate).length != 0;\n}","import React from \"react\";\nimport {\n  StyleSheet,\n  View,\n  TextInput,\n  FlatList,\n} from \"react-native\";\nimport {useFilteredRecipes} from \"../../Types/Recipe\";\nimport {RecipeRow} from './RecipeRow';\n\nexport default function HomeView() {\n\n    const [filteredRecipes, filterRecipes] = useFilteredRecipes();\n\n    const styles = StyleSheet.create({\n        column: {\n            flex: 1\n        },\n        container: {\n            flex: 1,\n            backgroundColor: \"#fff\",\n            flexDirection: 'row',\n            justifyContent: \"center\",\n        }\n    });\n\n    return (\n        <View style={styles.container}>\n        <View style={styles.column} />\n        <View style={styles.column}>\n            <TextInput\n            style={{ height: 40, borderColor: \"gray\", borderWidth: 1, marginBottom: 10 }}\n            onChangeText={filterRecipes}\n            />\n            <FlatList\n            data={filteredRecipes}\n            renderItem={(row) => RecipeRow(row.item)}\n            keyExtractor={(item) => item.name.value}\n            />\n        </View>\n        <View style={styles.column} />\n        </View>\n    );\n}","export type Pattern = string;\n\nexport function parsePatterns(str: string): Pattern[] {\n    return str.split(\" \").map(s => s.trim()).filter(s => s.length > 0);\n};","import React from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Button,\n} from \"react-native\";\nimport * as WebBrowser from \"expo-web-browser\";\n\nexport function RecipeRow(recipe: Recipe) {\n\n    const styles = StyleSheet.create(\n    {\n        row: {\n            borderWidth: 1,\n            borderColor: \"#888\",\n            flex: 1,\n            flexDirection: 'row'\n        },\n        title: {\n            fontWeight: 'bold',\n            fontSize: 16\n        }\n    });\n\n    return (\n        <View style={styles.row}>\n            <View style={{\n                flex: 1,\n                flexDirection: 'column',\n            }}>\n                <Text style={styles.title}>{recipe.name.value}</Text>\n                <View>\n                    <Text>Ingrédients: {recipe.printIngredients()}.</Text>\n                </View>\n            </View>\n\n            <Button\n                title='Voir la recette'\n                onPress={WebBrowser.openBrowserAsync.bind(this, recipe.url)}\n            />\n        </View>\n    );\n};","import React from \"react\";\nimport HomeView from './src/Home/Components/HomeView';\n\nexport default function App() {\n  return HomeView();\n}\n\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/MyCookBook/expo-service-worker.js', { scope: '/MyCookBook/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}