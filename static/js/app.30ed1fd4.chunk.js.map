{"version":3,"sources":["src/Types/Recipe.ts","src/Types/functions.ts","src/Types/Ingredient.ts","src/Types/Months.ts","src/Types/SearchableString.ts","src/Home/API/HomeAPI.js","src/Home/Components/HomeView.js","src/Types/Patterns.ts","src/Home/Components/RecipeRow.js","App.tsx","web-build/register-service-worker.js"],"names":["Recipe","name","ingredients","url","matchesPattern","p","predicate","ingredientsMatch","i","filter","length","includes","matchesPatterns","list","printIngredients","map","value","join","Ingredient","seasonality","isAvailableIn","m","this","Months","January","February","March","April","May","June","July","August","September","October","November","December","wholeYear","range","begin","end","start","toString","SearchableString","str","lower","toLowerCase","backend","getMarmitonRecipes","search","a","async","queryParam","fetch","headers","then","response","json","rawRecipes","recipe","ingredient","getLocalRecipes","localRecipes","recipes","HomeView","useState","HomeAPI","filteredRecipes","setFilteredRecipes","textSearch","setTextSearch","useRef","updateDisplayedRecipes","marmitonRecipes","newFilteredRecipes","patterns","split","s","trim","filterRecipes","concat","centralColumnWidth","Math","min","Dimensions","get","width","styles","StyleSheet","create","columnMargins","flexGrow","flexShrink","flexBasis","centralColumn","flex","container","backgroundColor","flexDirection","justifyContent","line","height","marginBottom","marginTop","View","style","TextInput","borderColor","borderWidth","onChangeText","Button","title","onPress","FlatList","data","renderItem","row","fontWeight","fontSize","Text","WebBrowser","bind","RecipeRow","item","keyExtractor","App","navigator","window","addEventListener","serviceWorker","register","scope","info","catch","error","console"],"mappings":"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","file":"static/js/app.30ed1fd4.chunk.js","sourcesContent":["import {useState} from \"react\";\nimport Months from './Months';\nimport {Pattern, parsePatterns} from './Patterns';\n//import Ingredients from './Ingredient';\nimport {exists, forall} from './functions'\nimport SearchableString from './SearchableString';\n/*\nconst {\n    chickpea, \n    coconutMilk, \n    lentils, \n    tomato, \n    leek,\n    turnip,\n    carrot,\n    celeryBranch,\n    parisMushroom,\n    onion,\n    garlic,\n    soySauce,\n} = Ingredients;\n\nconst chickpeaCurry = Recipe(\n  SearchableString(\"Curry de pois-chiches\"),\n  [chickpea, coconutMilk],\n  \"https://www.youtube.com/watch?v=aP6eXpwIths\"\n);\nconst veganBolognese = Recipe(\n  SearchableString(\"Bolognaise Végan\"),\n  [lentils, tomato],\n  \"https://www.marmiton.org/recettes/recette_bolognaise-aux-lentilles_27842.aspx\"\n);\nconst veganParmentier = Recipe(\n    SearchableString(\"Hachis parmentier végan\"),\n    [tomato, leek, turnip, carrot, celeryBranch, parisMushroom, onion, garlic, soySauce],\n    \"https://www.marmiton.org/recettes/recette_hachis-parmentier-vegetarien_14594.aspx\"\n);\nconst allRecipes: Recipe[] = [chickpeaCurry, veganBolognese, veganParmentier];\n*/\n\nconst allRecipes: Recipe[] = [];\n\nexport function Recipe(name: SearchableString, ingredients: Ingredient[], url: string) {\n    function matchesPattern(p: Pattern): boolean {\n        const ingredientMatches = (i: Ingredient) => i.matchesPattern(p);\n\n        const ingredientsMatch = exists(ingredients, ingredientMatches);\n        return name.includes(p) || ingredientsMatch;\n    }\n\n    return ({\n        matchesPatterns(p: Pattern[]): boolean {\n            return forall(p, matchesPattern);\n        },\n        name: name,\n        ingredients: ingredients,\n        url: url,\n        printIngredients(): string {\n            return ingredients.map(i => i.name.value).join(', ');\n        }\n    });\n}\n\nexport function filterRecipes(recipes: Recipes[], search: string): Recipe[] {\n    const patterns: Pattern[] = parsePatterns(search);\n    const filtered = recipes.filter((recipe) => recipe.matchesPatterns(patterns));\n\n    return filtered;\n}\n/*\nexport function useFilteredRecipes(): [Recipe[], ((string) => void)] {\n    const [filteredRecipes, setFilteredRecipes] = useState(allRecipes);\n\n    const filterRecipes: void = (text: string) => {\n        const patterns: Pattern[] = parsePatterns(text);\n        const filtered = allRecipes.filter((recipe) => recipe.matchesPatterns(patterns));\n        setFilteredRecipes(filtered);\n    }\n\n    return [filteredRecipes, filterRecipes];\n}*/\n","export function forall(list: A[], predicate: (A) => boolean): boolean {\n    return list.filter(predicate).length === list.length;\n}\n\nexport function exists(list: A[], predicate: (A) => boolean): boolean {\n    return list.filter(predicate).length != 0;\n}","import Months from './Months';\nimport {MonthPattern} from './Patterns';\nimport SearchableString from './SearchableString';\n\nexport function Ingredient(name: SearchableString, seasonality: Months[]) {\n    return ({\n        name: name,\n        seasonality: seasonality,\n        isAvailableIn(p: MonthPattern): boolean {\n            return seasonality.filter(m => m.name.includes(p)).length != 0;\n        },\n        matchesPattern(p: Pattern): boolean {\n            return name.includes(p) || this.isAvailableIn(p);\n        },\n    });\n}\n/*\nexport default {\n    Ingredient: Ingredient,\n    coconutMilk: Ingredient(SearchableString(\"Lait de Coco\"), Months.wholeYear),\n    lentils: Ingredient(SearchableString(\"Lentilles\"), Months.wholeYear),\n    tomato: Ingredient(SearchableString(\"Tomates\"), Months.range(Months.June, Months.September)),\n    chickpea: Ingredient(SearchableString(\"Pois-Chiches\"), Months.wholeYear),\n    leek: Ingredient(SearchableString(\"Poireaux\"), Months.range(Months.September, Months.April)),\n    turnip: Ingredient(SearchableString(\"Navets\"), Months.range(Months.October, Months.May)),\n    carrot: Ingredient(SearchableString(\"Carottes\"), Months.range(Months.September, Months.March)),\n    celeryBranch: Ingredient(SearchableString(\"Branches de céleri\"), Months.range(Months.October, Months.March)),\n    parisMushroom: Ingredient(SearchableString(\"Champignons de Paris\"), Months.wholeYear),\n    onion: Ingredient(SearchableString(\"Oignons\"), Months.range(Months.September, Months.April)),\n    garlic: Ingredient(SearchableString(\"Gousse d'ail\"), Months.range(Months.July, Months.December)),\n    soySauce: Ingredient(SearchableString(\"Sauce Soja\"), Months.wholeYear)\n};*/","type Month = {\n    name: string,\n    value: number\n}\nconst Months = {\n  January: {name: \"janvier\", value: 1},\n  February: {name: \"février\", value: 2},\n  March: {name: \"mars\", value: 3},\n  April: {name: \"avril\", value: 4},\n  May: {name: \"mai\", value: 5},\n  June: {name: \"juin\", value: 6},\n  July: {name: \"juillet\", value: 7},\n  August: {name: \"août\", value: 8},\n  September: {name: \"septembre\", value: 9},\n  October: {name: \"octobre\", value: 10},\n  November: {name: \"novembre\", value: 11},\n  December: {name: \"décembre\", value: 12},\n};\n\nconst wholeYear = [\n    Months.January, \n    Months.February, \n    Months.March, \n    Months.April, \n    Months.May, \n    Months.June, \n    Months.July, \n    Months.August, \n    Months.September, \n    Months.October, \n    Months.November, \n    Months.December\n];\n\nfunction range(begin: Month, end: Month): List[Month] {\n    if (begin == end) return begin;\n    if (begin <= end) {\n        return wholeYear.filter(m => m.value >= begin.value && m.value <= end.value);    \n    }\n    return wholeYear.filter(m => m >= end || m <= start);\n}\n\nexport default {\n    ...Months,\n    wholeYear,\n    range,\n    toString,\n};","import {Pattern} from './Patterns';\n\nexport default function SearchableString(str: string) {\n    const lower: string = str.toLowerCase();\n\n    return ({\n        includes(p: Pattern): boolean {\n            return lower.includes(p);\n        },\n        value: str\n    });\n    \n}","import {Recipe} from '../../Types/Recipe';\nimport {Ingredient} from '../../Types/Ingredient';\nimport Months from '../../Types/Months';\nimport SearchableString from '../../Types/SearchableString';\nimport localRecipes from '../../../assets/recipes.json';\n\nconst backend = \"https://my-cook-book-backend.herokuapp.com\"\n//const backend = \"http://localhost:8080\"\n\nasync function getMarmitonRecipes(search) {\n    const queryParam = search ? `?aqt=${search}` : '';\n\n    return fetch(`${backend}/marmiton${queryParam}`, {\n        headers: {\n            'access-control-allow-origin': backend\n        }\n    }).then((response) => {\n        return response.json();\n    }).then((rawRecipes) => {\n        return rawRecipes.map((recipe) => {\n            const ingredients = recipe.ingredients.map((ingredient) => {\n                return Ingredient(SearchableString(ingredient), Months.wholeYear);\n            });\n\n            return Recipe(SearchableString(recipe.name), ingredients, recipe.url);\n        });\n    });\n}\n\nfunction getLocalRecipes() {\n    const rawRecipes = localRecipes.recipes;\n    \n    return rawRecipes.map((recipe) => {\n        const ingredients = recipe.ingredients.map((ingredient) => {\n            return Ingredient(SearchableString(ingredient.name.value), ingredient.seasonality);\n        })\n\n        return Recipe(SearchableString(recipe.name.value), ingredients, recipe.url);\n    });\n}\n\nexport default {\n    getMarmitonRecipes: getMarmitonRecipes,\n    getLocalRecipes: getLocalRecipes\n}","import React, {useEffect, useState, useCallback, useRef} from \"react\";\nimport {\n  StyleSheet,\n  View,\n  TextInput,\n  FlatList,\n  Button,\n  Dimensions\n} from \"react-native\";\nimport {filterRecipes} from \"../../Types/Recipe\";\nimport {RecipeRow} from './RecipeRow';\nimport HomeAPI from '../API/HomeAPI';\n\nexport default function HomeView() {\n    const [localRecipes, setLocalRecipes] = useState(HomeAPI.getLocalRecipes());\n    const [filteredRecipes, setFilteredRecipes] = useState(localRecipes);\n    const [textSearch, setTextSearch] = useState(\"\");\n    const textRef = useRef();\n\n    async function updateMarmitonRecipes() {\n        const marmitonRecipes = await HomeAPI.getMarmitonRecipes(textSearch);\n        updateDisplayedRecipes(marmitonRecipes);\n    }\n\n    function updateDisplayedRecipes(marmitonRecipes) {\n        const newFilteredRecipes = filterRecipes(localRecipes, textSearch);\n        setFilteredRecipes(newFilteredRecipes.concat(marmitonRecipes));\n    }\n\n    const centralColumnWidth = Math.min(Dimensions.get('window').width, 600);\n\n    const styles = StyleSheet.create({\n        columnMargins: {\n            flexGrow: 1,\n            flexShrink: 0,\n            flexBasis: 0\n        },\n        centralColumn: {\n            flex: 1, \n            flexBasis: centralColumnWidth\n        },\n        container: {\n            flex: 1,\n            backgroundColor: \"#fff\",\n            flexDirection: 'row',\n            justifyContent: 'center',\n        },\n        line: {\n            flexDirection: 'row',\n            height: 50,\n            marginBottom: 50,\n            marginTop: 50,\n            flex: 1,\n        }\n    });\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.columnMargins} />\n            <View style={styles.centralColumn}>\n                <View style={styles.line}>\n                    <TextInput\n                    style={{ height: 40, borderColor: \"gray\", borderWidth: 1, flex: 2 }}\n                    onChangeText={setTextSearch}\n                    value={textSearch}\n                    />\n                    <View>\n                        <Button \n                            title=\"Go !\" \n                            style={{flex: 1}}\n                            onPress={updateMarmitonRecipes}\n                        />\n                    </View>\n                </View>\n                <FlatList\n                    data={filteredRecipes}\n                    renderItem={(row) => RecipeRow(row.item)}\n                    keyExtractor={(item) => item.name.value}\n                />\n            </View>\n            <View style={styles.columnMargins} />\n        </View>\n    );\n}","export type Pattern = string;\n\nexport function parsePatterns(str: string): Pattern[] {\n    return str.split(\" \").map(s => s.trim()).filter(s => s.length > 0);\n};","import React from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Button,\n} from \"react-native\";\nimport * as WebBrowser from \"expo-web-browser\";\n\nexport function RecipeRow(recipe: Recipe) {\n\n    const styles = StyleSheet.create(\n    {\n        row: {\n            borderWidth: 1,\n            borderColor: \"#888\",\n            flex: 1,\n            flexDirection: 'row'\n        },\n        title: {\n            fontWeight: 'bold',\n            fontSize: 16\n        }\n    });\n\n    return (\n        <View style={styles.row}>\n            <View style={{\n                flex: 1,\n                flexDirection: 'column',\n            }}>\n                <Text style={styles.title}>{recipe.name.value}</Text>\n                <View>\n                    <Text>Ingrédients: {recipe.printIngredients()}.</Text>\n                </View>\n            </View>\n\n            <Button\n                title='Voir la recette'\n                onPress={WebBrowser.openBrowserAsync.bind(this, recipe.url)}\n            />\n        </View>\n    );\n};","import React from \"react\";\nimport HomeView from \"./src/Home/Components/HomeView\";\n\nexport default function App() {\n  return HomeView();\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/MyCookBook/expo-service-worker.js', { scope: '/MyCookBook/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}